const Request = require('../models/Request.model');
const Client = require("../models/Client.model");
const Barber = require("../models/Barber.model");
const User = require("../models/User.model");
const {MIO} = require("../index");
const sendMail = require("../utils/nodemailer");

const botMessage = (requestId, barberName, barberTelegramID, clientId, total) =>
    (`üìé –ó–∞—è–≤–∫–∞ ‚Ññ${requestId}\n` +
    `–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä: [${barberName}](${barberTelegramID && ("https://t.me/" + barberTelegramID)})\n` +
    `üÜî –∫–ª–∏–µ–Ω—Ç–∞: --> ${clientId}\n` +
    `–ù–∞ —Å—É–º–º—É: ${total}$`);

module.exports.requestsController = {
    createRequest: async (req, res) => {
    try {
      const { role,personal, name: clientName } = req.user;
      const { barberId, hairstyle, beard, date } = req.body;
      const client = await Client.findById(personal);
      const barber = await User.findById(barberId).populate("personal", "-password");

      if (role === 'Barber') {
        return res.status(400).json({error: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"})
      }
      if (!barberId) {
        return res.status(400).json({error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä–∞!"});
      }
      if (!date) {
        return res.status(400).json({error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É!"})
      }
      if (hairstyle.name === '–ö–ª–∞–¥–∫–∞') { //–£–±—Ä–∞—Ç—å –≤ –±—É–¥—É—â–µ–º
        return res.status(400).json({error: "–î–∞–Ω–Ω–∞—è –ø—Ä–∏—á—ë—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫ –ø–æ–∫—É–ø–∫–µ!"})
      }

      const totalPrice = (beard?.price || 0) + (hairstyle?.price || 0);

      if (client.balance < totalPrice) {
        return res.status(400).json({error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã"})
      }

      const newRequest = await Request.create({
        date,
        clientId: client._id,
        barberId: barber.personal._id,
        requestData: {hairstyleId: hairstyle?._id, beardId: beard?._id, total: totalPrice }
      });

      const updateOptions = {$push: {requests: newRequest._id}, $inc: {balance: totalPrice}};

      await Barber.findByIdAndUpdate(barber.personal._id, updateOptions);
      await Client.findByIdAndUpdate(client._id, {$inc: {balance: -totalPrice}});

      const requestsCount = await Request.find().count(); //TELEGRAM MESSAGE
      MIO.sendMessage(
          process.env.BOT_ADMIN_ID,
          botMessage(requestsCount, barber.name, barber.personal?.telegram, client._id, totalPrice),
          {parse_mode: 'markdown'}
      );

      sendMail({ //EMAIL MESSAGE
        to: barber.personal.email,
        subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${clientName}`,
        html: `
              <h2>–í–∞–º –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</h2>
              <p>
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞–º –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>${clientName}</b><br />
                –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –Ω–∞ —Å—É–º–º—É: <i><b>${totalPrice}</b> —Ä—É–±.</i>  
              </p>
              <p>
                –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: <br />
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>${client.number}</b>
              </p>
              `
      });

      return res.status(200).json({
        success: "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤–æ–≤—Ä–µ–º—è :)",
        balance: client.balance - totalPrice
      });
    } catch (e) {
      return res.status(400).json({error: e});
    }
  },
  getRequestsForBarber: async (req, res) => {
    const { barberId } = req.body
    try {
      const data = await Request.findById({ barberId })
      return res.status(200).json(data)
    } catch (e) {
      console.log(e)
      return res.status(400).json(`error while getting requests: ${e.toString()}`)
    }
  },
  acceptRequest: async (req, res) => {
    try {
      await Request.findByIdAndUpdate(req.params.id, { isAccept: true })
      return res.status(200).json(`request was successfully accepted`)
    } catch (e) {
      return res.status(400).json(`error while accepting the request: ${e.toString()}`)
    }
  }
}